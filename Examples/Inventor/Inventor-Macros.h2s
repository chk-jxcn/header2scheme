undefine(`index')
changequote(xyzzy,yzzyx)
define(SO_ACTION_HEADER,public: virtual SoType getTypeId(); static SoType getClassTypeId())
define(SO_DETAIL_HEADER,public: virtual SoType getTypeId(); static SoType getClassTypeId())
define(SO_ELEMENT_ABSTRACT_HEADER,public: static SoType getClassTypeId(); static int getClassStackIndex())
define(SO_ELEMENT_HEADER,SO_ELEMENT_ABSTRACT_HEADER)
define(SO_ENGINE_ABSTRACT_HEADER,public: static SoType getClassTypeId(); virtual SoType getTypeId(); public: virtual const SoFieldData *getFieldData(); virtual const SoEngineOutputData *getOutputData())
define(SO_ENGINE_HEADER,SO_ENGINE_ABSTRACT_HEADER)
define(SO_COMPOSE__HEADER,SO_ENGINE_HEADER($1); private: ~$1(); virtual void evaluate(); public: $1(); static void initClass())
define(SO_INTERPOLATE_HEADER,SO_ENGINE_HEADER($1); private: ~$1(); virtual void evaluate(); public: static void	initClass(); public: $1())
define(SO_EVENT_HEADER,public: static SoType getClassTypeId(); virtual SoType getTypeId())
define(SO__FIELD_HEADER,public: virtual SoType getTypeId(); static SoType getClassTypeId(); const $1 & operator =(const $1 &f))
define(SO_SFIELD_REQUIRED_HEADER,SO__FIELD_HEADER($1))
define(SO_SFIELD_CONSTRUCTOR_HEADER,public: $1(); virtual ~$1())
define(SO_SFIELD_VALUE_HEADER,public: $3 getValue(); void	setValue($3 newValue); $3 operator =($3 newValue); int operator ==(const $1 &f); int operator !=(const $1 &f))
define(SO_SFIELD_DERIVED_VALUE_HEADER,public: $3 operator =($3 newValue))
define(SO_SFIELD_HEADER,SO_SFIELD_REQUIRED_HEADER($1); SO_SFIELD_CONSTRUCTOR_HEADER($1); SO_SFIELD_VALUE_HEADER($1, $2, $3))
define(SO_SFIELD_DERIVED_HEADER,SO_SFIELD_REQUIRED_HEADER($1); SO_SFIELD_CONSTRUCTOR_HEADER($1); SO_SFIELD_DERIVED_VALUE_HEADER($1, $2, $3))
define(SO_MFIELD_REQUIRED_HEADER,SO__FIELD_HEADER($1))
define(SO_MFIELD_CONSTRUCTOR_HEADER,public: $1(); virtual ~$1())
define(SO_MFIELD_VALUE_HEADER,public: $3 operator [](int i); const $2 *getValues(int start) int find($3 targetValue, SbBool addIfNotFound); void setValues(int start, int num, const $2 *newValues); void	set1Value(int index, $3 newValue); void	setValue($3 newValue); $3 operator =($3 newValue); int operator ==(const $1 &f); int operator !=(const $1 &f); $2 *startEditing(); void finishEditing())
define(SO_MFIELD_DERIVED_VALUE_HEADER,public: $3 operator =($3 newValue))
define(SO_MFIELD_HEADER,SO_MFIELD_REQUIRED_HEADER($1); SO_MFIELD_CONSTRUCTOR_HEADER($1); SO_MFIELD_VALUE_HEADER($1, $2, $3))
define(SO_MFIELD_DERIVED_HEADER,SO_MFIELD_REQUIRED_HEADER($1); SO_MFIELD_CONSTRUCTOR_HEADER($1); SO_MFIELD_DERIVED_VALUE_HEADER($1, $2, $3))
define(SO_NODE_ABSTRACT_HEADER,public: static SoType getClassTypeId(); virtual SoType getTypeId())
define(SO_NODE_HEADER,SO_NODE_ABSTRACT_HEADER($1))
define(SO__KIT_CATALOG_HEADER,public: static const SoNodekitCatalog *getClassNodekitCatalog(); virtual const SoNodekitCatalog *getNodekitCatalog())
define(SO_KIT_HEADER,SO_NODE_HEADER($1); SO__KIT_CATALOG_HEADER($1))
define(SO_KIT_CATALOG_ENTRY_HEADER,protected: SoSFNode partName)
define(SO_V1_SUBKIT_CATALOG_HEADER,private: static SoV1NodekitCatalog *nodekitCatalog; protected: static SoV1NodekitCatalog *getClassNodekitCatalog(); virtual const SoV1NodekitCatalog *getNodekitCatalog())
